import './ordered.css';
import { useLocation, useNavigate } from 'react-router-dom';
import React, { useState, useEffect } from 'react';
import { auth, db } from '../firebase/config';
import { addDoc, collection, serverTimestamp } from 'firebase/firestore';
import { onAuthStateChanged } from 'firebase/auth';

function OrderedPage() {
  const location = useLocation();
  const navigate = useNavigate();
  const [saving, setSaving] = useState(false);
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  const orderData = location.state?.orderData || {};

  // Check if user is logged in when component mounts
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {
      setUser(currentUser);
      setLoading(false);
      
      if (!currentUser) {
        alert('–≠–Ω—ç —Ö—É—É–¥—Å—ã–≥ “Ø–∑—ç—Ö–∏–π–Ω —Ç—É–ª–¥ –Ω—ç–≤—Ç—ç—Ä—á –æ—Ä–Ω–æ —É—É.');
        navigate('/login');
      }
    });

    return () => unsubscribe();
  }, [navigate]);

  const placeOrder = async () => {
    if (!user) {
      alert('–ó–∞—Ö–∏–∞–ª–≥–∞ ”©–≥”©—Ö–∏–π–Ω —Ç—É–ª–¥ –Ω—ç–≤—Ç—ç—Ä—á –æ—Ä–Ω–æ —É—É.');
      navigate('/login');
      return;
    }

    if (!orderData || Object.keys(orderData).length === 0) {
      alert('–ó–∞—Ö–∏–∞–ª–≥—ã–Ω –º—ç–¥—ç—ç–ª—ç–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π.');
      navigate('/');
      return;
    }

    try {
      setSaving(true);

      const payload = {
        userId: user.uid,
        userEmail: user.email,
        items: {
          meat: Number(orderData.meat) || 0,
          cheese: Number(orderData.cheese) || 0,
          salad: Number(orderData.salad) || 0,
          tomato: Number(orderData.tomato) || 0,
        },
        totalPrice: Number(orderData.totalPrice) || 0,
        createdAt: serverTimestamp(),
      };

      console.log('Order payload:', payload);

      const docRef = await addDoc(
        collection(db, 'orders'),
        payload
      );

      console.log('Order saved with ID:', docRef.id);
      alert('–ó–∞—Ö–∏–∞–ª–≥–∞ –∞–º–∂–∏–ª—Ç—Ç–∞–π ”©–≥”©–≥–¥–ª”©”©!');
      
      navigate('/delivery', {
        replace: true,
        state: { orderData, orderId: docRef.id },
      });
    } catch (error) {
      console.error('Error placing order:', error);
      alert('–ó–∞—Ö–∏–∞–ª–≥–∞ ”©–≥”©—Ö”©–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞: ' + error.message);
    } finally {
      setSaving(false);
    }
  };

  const handleDelivery = () => {
    navigate('/delivery', {
      state: { orderData },
    });
  };

  if (loading) {
    return <div className="ordered-page">–ê—á–∞–∞–ª–ª–∞–∂ –±–∞–π–Ω–∞...</div>;
  }

  if (!orderData || Object.keys(orderData).length === 0) {
    return (
      <div className="ordered-page">
        <h2>–ó–∞—Ö–∏–∞–ª–≥–∞ –æ–ª–¥—Å–æ–Ω–≥“Ø–π</h2>
        <button onClick={() => navigate('/')} className="back-button">
          –ë—É—Ä–≥–µ—Ä –±“Ø—Ç—ç—ç–≥—á —Ä“Ø“Ø –±—É—Ü–∞—Ö
        </button>
      </div>
    );
  }

  return (
    <div className="ordered-page">
      <h2>–¢–∞–Ω—ã –∑–∞—Ö–∏–∞–ª–≥—ã–Ω —Ö—É—Ä–∞–∞–Ω–≥—É–π</h2>
      <div className="order-details">
        <p>ü•© –ú–∞—Ö: {orderData.meat || 0}</p>
        <p>üßÄ –ë—è—Å–ª–∞–≥: {orderData.cheese || 0}</p>
        <p>ü•¨ –°–∞–ª–∞—Ç: {orderData.salad || 0}</p>
        <p>üçÖ –£–ª–∞–∞–Ω –ª–æ–æ–ª—å: {orderData.tomato || 0}</p>
        <h3>–ù–∏–π—Ç “Ø–Ω—ç: ${orderData.totalPrice || '0.00'}</h3>
      </div>
      
      <div className="order-actions">
        <button
          onClick={() => navigate('/')}
          className="back-button"
        >
          –ë—É—Ä–≥–µ—Ä –±“Ø—Ç—ç—ç–≥—á —Ä“Ø“Ø –±—É—Ü–∞—Ö
        </button>

        <button 
          onClick={placeOrder} 
          className="place-order-button"
          disabled={saving}
        >
          {saving ? '–ó–∞—Ö–∏–∞–ª–≥–∞ ”©–≥—á –±–∞–π–Ω–∞...' : '–ó–∞—Ö–∏–∞–ª–≥–∞ ”©–≥”©—Ö'}
        </button>

        <button 
          onClick={handleDelivery} 
          className="delivery-button"
        >
          –•“Ø—Ä–≥—ç–ª—Ç —Ä“Ø“Ø “Ø—Ä–≥—ç–ª–∂–ª“Ø“Ø–ª—ç—Ö
        </button>
      </div>
    </div>
  );
}

export default OrderedPage;